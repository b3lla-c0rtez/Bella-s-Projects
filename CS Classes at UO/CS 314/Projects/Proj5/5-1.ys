# Simulator: https://boginw.github.io/js-y86-64/
# Execution begins at address 0
.pos 0
irmovq stack, %rsp      # Set up stack pointer
call main       # Execute main program
halt            # Terminate program

# Array of elements
.align 8
array:
.quad 0x000000000010
.quad 0x000000000009
.quad 0x000000000008
.quad 0x000000000007
.quad 0x000000000006
.quad 0x000000000005
.quad 0x000000000004
.quad 0x000000000003
.quad 0x000000000002
.quad 0x000000000001



main:   
irmovq array, %rdi #a[0]
irmovq $10, %rsi # array length 10
call sort       # sort
ret

sort:
# *array in %rdi (a[0]), length in %rsi, %r8 is a[1]
# %r11 is i, sorted is %rax, %r13 is iPtr
    rrmovq %rdi, %r8 # set up a[0] and a[1]
    iaddq $8, %r8 #a[0] + 8 = a[1]
    
    outerloop:
    irmovq $1, %rax # sorted = 1
    
    rrmovq %rdi, %r13 # long *iPtr = array
    
    irmovq $0, %r11 # i = 0
    
    isubq $1, %rsi  # length - 1
    rrmovq %rsi, %r10 # length is saved in register 10
    
    innerloop: 
        mrmovq (%rdi), %r12 #saves a[0] in register 12
        mrmovq (%r8), %r14 #saves a[1] in register 14
        
        subq %r14, %r12 #a[0] - a[1]
        jle ifSwapOrNot # if it is less than or equal to, jump to ifSwapOrNot
        call swap # if it is greater call swap
        irmovq $0, %rax #sorted = 0
        
    ifSwapOrNot:
        iaddq $8, %rdi # add 8 to a[0]
        iaddq $8, %r8 # add 8 to a[1]
        isubq $1, %r10 # length - 1 again
        jg innerloop

        
    ifnotSorted:
        rrmovq %rsi, %r10 # grab length and register 10 again; basically resetting it
        rrmovq %r13, %rdi # grab the array = *iPtr; resetting this again
        rrmovq %rdi, %r8 # grabbing a[0] and a[1]; resetting this again
        iaddq $8, %r8 # add 8 to a[1]
        isubq $0, %rax # sorted - 1
        je outerloop # jump to outerloop if equal
    ret # return
        
        
    
swap:
# %r8 is a[1], %rdi is a[0]
    mrmovq (%r8), %rdx  # looks in the location pointed at by r8
                       # copies value at the location into rdx
    mrmovq (%rdi), %rbx # same for rdi, locked at rbx 

    rmmovq %rbx, (%r8) # copies contnets of rbx into location
                       # pointed at by r8
    rmmovq %rdx, (%rdi) # same for rdi, only copes contents of rdx location
    ret # return
    
# Stack starts here and grows to lower addresses
.pos 0x200
stack: