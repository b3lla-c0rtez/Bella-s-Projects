# Execution begins at address 0 
    .pos 0
    irmovq stack, %rsp  # Set up stack pointer
    call main       # Execute main program
    halt            # Terminate program 

# Array of 4 elements
    .align 8
array:  
    .quad 0x000000000010
    .quad 0x000000000009
    .quad 0x000000000008
    .quad 0x000000000007
    .quad 0x000000000006
    .quad 0x000000000005
    .quad 0x000000000004
    .quad 0x000000000003
    .quad 0x000000000002
    .quad 0x000000000001

main:   
    irmovq array, %rdi #rdi-a[0]
    irmovq $10, %rsi #%rsi-10
    call swapPairs # swapPairs(array, 10)
    ret

# XXmovq
# X's can be one of i, r, m where:
# i is immediate value
# r is register
# m is memory

swapPairs:
    rrmovq %rdi, %r8 #copy a[0] into r8
    rrmovq %rdi, %r9 # same thing for r9
    iaddq $8, %r9 #now r9 points to a[1]
    
    loop: 
        # 1.
        # call swap
        # 2. increment pointers
        iaddq $16, %r8
        iaddq $16, %r9
        #3. decrement counter and do conidtional jump
        isubq $2, %rsi # dec by 2 b/c we only want to loop n/2 times
        jg loop # jne also works
    ret
    
swap:
    mrmovq (%r8), %rdx # looks in the location pointed at by r8
                       # copies value at the location into rdx
    mrmovq (%r9), %rbx # same for r9
    rmmovq %rbx, (%r8) # copies contnets of rbx into location
                       # pointed at by r8
    rmmovq %rdx, (%r9) # same for r9
    ret

# Stack starts here and grows to lower addresses
    .pos 0x200
stack: